import logging
import sys

from rest.views import BaseRetrieveUpdateDestroyAPIView
from users.constants import *
from users.models import User
from {{app_name}}.rest_api.serializers import ({{model_serializer_name}}Serializer,
                                               {{model_name}}OutputSerializer)
from {{app_name}}.services import {{model_name}}Service

{{additional_view_imports}}

logger = logging.getLogger(__name__)


class {{model_name}}RetrieveUpdateDestroyAPIView(BaseRetrieveUpdateDestroyAPIView):

    serializer_class = {{model_serializer_name}}Serializer
    single_get_method_allowed = [{{single_get_method_allowed}}]
    put_method_allowed = [{{put_method_allowed}}]
    delete_method_allowed = [{{delete_method_allowed}}]

    def put(self,
            request,
            {{model_file_name}}_uuid,
            *args,
            **kwargs):
        """
        Api version: {{api_version}}

        Updates existing {{model_name_spaces_lower_case}}.

        Url Parameter is `{{model_file_name}}_uuid` denoting {{model_name_spaces_lower_case}} uuid.
        """
        user = request.user
        self.check_group_permission(method_name=sys._getframe().f_code.co_name,
                                    user=user)
        response, data = self.check_serializer(request=request)
        if response:
            return response
        {{model_name}}Service(user=user).check_{{model_file_name}}(
            {{model_file_name}}_uuid={{model_file_name}}_uuid)
        {{model_file_name}} = {{model_name}}Service(user=user).update(
            uuid_value={{model_file_name}}_uuid,
            **data)
        return self.ok(data={{model_file_name}},
                       serializer={{model_name}}OutputSerializer,
                       request=request,
                       is_listing=False)

    def get(self,
            request,
            {{model_file_name}}_uuid,
            *args,
            **kwargs):
        """
        Api version: {{api_version}}

        Retrieves a single existing {{model_name_spaces_lower_case}}.

        Url Parameter is `{{model_file_name}}_uuid` denoting {{model_name_spaces_lower_case}} uuid.
        """
        user = request.user
        self.check_group_permission(method_name='single_{0}'.format(sys._getframe().f_code.co_name),
                                    user=user)
        {{model_file_name}} = {{model_name}}Service(user=user).check_{{model_file_name}}(
            {{model_file_name}}_uuid={{model_file_name}}_uuid)
        return self.ok(data={{model_file_name}},
                       serializer={{model_name}}OutputSerializer,
                       request=request,
                       is_listing=False,
                       many=False)

    def delete(self,
               request,
               {{model_file_name}}_uuid,
               *args,
               **kwargs):
        """
        Api version: {{api_version}}

        Deletes existing {{model_name_spaces_lower_case}}.

        Url Parameter is `{{model_file_name}}_uuid` denoting {{model_name_spaces_lower_case}} uuid.
        """
        user = request.user
        self.check_group_permission(method_name=sys._getframe().f_code.co_name,
                                    user=user)
        {{model_name}}Service(user=user).check_{{model_file_name}}(
            {{model_file_name}}_uuid={{model_file_name}}_uuid)
        {{model_file_name}} = {{model_name}}Service(user=user).delete_by_uuid(
            uuid_value={{model_file_name}}_uuid)
        return self.ok(data={{model_file_name}},
                       serializer={{model_name}}OutputSerializer,
                       request=request,
                       is_listing=False,
                       many=False)
