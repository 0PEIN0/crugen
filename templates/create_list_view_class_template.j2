import logging

from commons.custom_exceptions import ObjectDoesNotExist
from {{app_name}}.rest_api.serializers import ({{model_name}}CreateUpdateSerializer,
                                                 {{model_name}}OutputSerializer)
from {{app_name}}.services import {{model_name}}Service
from rest.views import BaseListCreateAPIView

from ...models import {{model_name}}
from users.constants import *

logger = logging.getLogger(__name__)


class {{model_name}}CreateListAPIView(BaseListCreateAPIView):

    serializer_class = {{model_name}}CreateUpdateSerializer
    get_method_allowed = []
    post_method_allowed = []

    def post(self,
             request,
             *args,
             **kwargs):
        """
        Api version: {{api_version}}

        Creates a new {{model_name_spaces_lower_case}}.
        """
        user = request.user
        response, data = self.check_serializer(request=request)
        if response:
            return response{{foreign_key_fields}}
        created_{{model_file_name}} = {{model_name}}Service(
            user=user).create(**data)
        return self.created(data=created_{{model_file_name}},
                            serializer={{model_name}}OutputSerializer,
                            request=request,
                            is_listing=False)

    def get_queryset(self,
                     user):
        return {{model_name}}.objects.filter({{model_file_name}}__user=user).order_by('-date_created')

    def get(self,
            request,
            *args,
            **kwargs):
        """
        Api version: {{api_version}}

        Returns a list of {{model_name_spaces_lower_case}}s.
        """
        user = request.user
        data = self.get_queryset(
            user=user)
        return self.ok(data=data,
                       serializer={{model_name}}OutputSerializer,
                       request=request,
                       is_listing=True,
                       many=True)
